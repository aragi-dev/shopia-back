{
    "inputs": [
        {
            "id": "contextPrompt",
            "description": "Eres un **Senior Backend Engineer** especializado en AWS Serverless Framework v4, arquitectura hexagonal, TypeORM para PostgreSQL e InversifyJS para inyección de dependencias.\n\n1. **Inicialización del proyecto**  \n   - Crea un nuevo servicio con Serverless Framework v4 en TypeScript.  \n   - Configura el `serverless.yml` para usar handlers en `.ts` y habilitar el modo de desarrollo local (`serverless dev`).\n\n2. **Arquitectura hexagonal**  \n   - Organiza el proyecto en carpetas `domain/`, `application/` y `infrastructure/`.  \n   - Define **Ports** (interfaces) en `domain/contracts/` y sus **Adapters** en `infrastructure/adapters/`.  \n   - Asegúrate de que las dependencias apunten siempre hacia adentro.\n\n3. **Configuración de TypeORM**  \n   - Instala y configura TypeORM apuntando a PostgreSQL, usando un `DataSource` en `infrastructure/database/`.  \n   - Crea entidades en `domain/entities/` y repositorios personalizados en `infrastructure/repositories/`.  \n   - Incluye migraciones y sincronización de esquemas.\n\n4. **Inyección de dependencias con InversifyJS**  \n   - Instala InversifyJS y activa el `reflect-metadata`.  \n   - Decora servicios y repositorios con `@injectable()` y usa `@inject()` para inyectarlos en los handlers.  \n   - Configura un contenedor en `infrastructure/container/` con bindings claros para cada port y adapter.\n\n5. **Despliegue y pruebas**  \n   - Añade comandos `sls deploy` y `sls invoke local`.  \n   - Escribe pruebas unitarias para la lógica de dominio aislada y tests de integración para los adapters (mockeando AWS y la base de datos).\n\nDevuélveme una estructura de carpetas, ejemplos de código (`serverless.yml`, configuración de TypeORM y contenedor de InversifyJS) y explicaciones detalladas de cada paso.",
            "type": "promptString",
            "default": "Eres un **Senior Backend Engineer** especializado en AWS Serverless Framework v4, arquitectura hexagonal, TypeORM para PostgreSQL e InversifyJS para inyección de dependencias.\n\n1. **Inicialización del proyecto**  \n   - Crea un nuevo servicio con Serverless Framework v4 en TypeScript.  \n   - Configura el `serverless.yml` para usar handlers en `.ts` y habilitar el modo de desarrollo local (`serverless dev`).\n\n2. **Arquitectura hexagonal**  \n   - Organiza el proyecto en carpetas `domain/`, `application/` y `infrastructure/`.  \n   - Define **Ports** (interfaces) en `domain/contracts/` y sus **Adapters** en `infrastructure/adapters/`.  \n   - Asegúrate de que las dependencias apunten siempre hacia adentro.\n\n3. **Configuración de TypeORM**  \n   - Instala y configura TypeORM apuntando a PostgreSQL, usando un `DataSource` en `infrastructure/database/`.  \n   - Crea entidades en `domain/entities/` y repositorios personalizados en `infrastructure/repositories/`.  \n   - Incluye migraciones y sincronización de esquemas.\n\n4. **Inyección de dependencias con InversifyJS**  \n   - Instala InversifyJS y activa el `reflect-metadata`.  \n   - Decora servicios y repositorios con `@injectable()` y usa `@inject()` para inyectarlos en los handlers.  \n   - Configura un contenedor en `infrastructure/container/` con bindings claros para cada port y adapter.\n\n5. **Despliegue y pruebas**  \n   - Añade comandos `sls deploy` y `sls invoke local`.  \n   - Escribe pruebas unitarias para la lógica de dominio aislada y tests de integración para los adapters (mockeando AWS y la base de datos).\n\nDevuélveme una estructura de carpetas, ejemplos de código (`serverless.yml`, configuración de TypeORM y contenedor de InversifyJS) y explicaciones detalladas de cada paso.",
        }
    ],
    "servers": {
        "filesystem": {
            "command": "npx",
            "args": [
                "-y",
                "@modelcontextprotocol/server-filesystem",
                "${workspaceFolder}"
            ]
        },
    },
}